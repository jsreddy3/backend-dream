"""Tests for dream title and summary generation with real LLM calls."""

import pytest
import pytest_asyncio
from uuid import uuid4
from datetime import datetime
from unittest.mock import AsyncMock, patch

from new_backend_ruminate.domain.dream.entities.dream import Dream, DreamStatus, GenerationStatus
from llm_test_utils import LLMTestHelper, requires_llm, llm_integration_test


@pytest_asyncio.fixture
async def real_llm():
    """Create a real OpenAI LLM service."""
    return LLMTestHelper.create_test_llm("gpt-4o-mini")


@pytest_asyncio.fixture
async def mock_repos():
    """Create mock repositories."""
    return {
        'dream_repo': AsyncMock(),
        'storage_repo': AsyncMock(),
        'user_repo': AsyncMock()
    }


@pytest_asyncio.fixture
async def dream_service_real_llm(mock_repos, real_llm):
    """Create a dream service with real LLM and mocked repositories."""
    # Import here to avoid circular import
    from new_backend_ruminate.services.dream.service import DreamService
    
    service = DreamService(
        dream_repo=mock_repos['dream_repo'],
        storage_repo=mock_repos['storage_repo'],
        user_repo=mock_repos['user_repo'],
        summary_llm=real_llm,
        question_llm=real_llm,
        analysis_llm=real_llm
    )
    return service


class TestRealLLMTitleSummary:
    """Test battery for generate_title_and_summary with real OpenAI calls."""
    
    @llm_integration_test
    async def test_simple_flying_dream_real_llm(self, dream_service_real_llm, mock_repos):
        """Test title/summary generation for a simple flying dream with real LLM."""
        user_id = uuid4()
        dream_id = uuid4()
        
        # Create a clear, simple dream
        dream = Dream(
            id=dream_id,
            title=None,
            created_at=datetime.utcnow(),
            state=DreamStatus.TRANSCRIBED.value,
            transcript="I was flying over beautiful mountains with snow-capped peaks. The air was crisp and clean. I felt completely free and peaceful. Below me, I could see a winding river cutting through the valley. I spread my arms wide like wings and soared higher into the bright blue sky."
        )
        dream.user_id = user_id
        
        # Setup mocks for repository calls
        mock_repos['dream_repo'].get_dream.return_value = dream
        updated_dream = Dream(
            id=dream_id,
            title="Flying Over Snow Mountains",  # Will be overridden by LLM
            created_at=datetime.utcnow(),
            state=DreamStatus.TRANSCRIBED.value,
            transcript=dream.transcript,
            summary="A peaceful flying dream..."  # Will be overridden by LLM
        )
        updated_dream.user_id = user_id
        mock_repos['dream_repo'].update_title_and_summary.return_value = updated_dream
        mock_repos['dream_repo'].update_summary_status = AsyncMock()
        
        # Execute with real LLM
        with patch('new_backend_ruminate.infrastructure.db.bootstrap.session_scope') as mock_session_scope:
            mock_session = AsyncMock()
            mock_session_scope.return_value.__aenter__.return_value = mock_session
            
            result = await dream_service_real_llm.generate_title_and_summary(user_id, dream_id)
        
        # Verify basic success
        assert result is not None
        
        # Verify repository calls were made
        mock_repos['dream_repo'].update_title_and_summary.assert_called_once()
        mock_repos['dream_repo'].update_summary_status.assert_called_once()
        
        # Extract the actual title and summary generated by the LLM
        call_args = mock_repos['dream_repo'].update_title_and_summary.call_args[0]
        generated_title = call_args[2]  # Third argument is title
        generated_summary = call_args[3]  # Fourth argument is summary
        
        # Verify the LLM generated reasonable content
        assert isinstance(generated_title, str)
        assert len(generated_title) > 0
        assert len(generated_title.split()) <= 10  # Should be concise
        assert isinstance(generated_summary, str)
        assert len(generated_summary) > 20  # Should be descriptive
        
        # Verify flying-related content
        title_lower = generated_title.lower()
        summary_lower = generated_summary.lower()
        
        # Should contain flying or mountain related terms
        flying_terms = ['fly', 'flight', 'soar', 'wing', 'air', 'sky']
        mountain_terms = ['mountain', 'peak', 'valley', 'snow']
        
        title_has_relevant_terms = any(term in title_lower for term in flying_terms + mountain_terms)
        summary_has_relevant_terms = any(term in summary_lower for term in flying_terms + mountain_terms)
        
        assert title_has_relevant_terms, f"Title doesn't contain relevant terms: {generated_title}"
        assert summary_has_relevant_terms, f"Summary doesn't contain relevant terms: {generated_summary}"
        
        print(f"✅ REAL LLM SUCCESS:")
        print(f"Generated Title: {generated_title}")
        print(f"Generated Summary: {generated_summary}")
    
    @llm_integration_test
    async def test_confusing_rambling_dream_real_llm(self, dream_service_real_llm, mock_repos):
        """Test LLM's ability to clean up a confusing, rambling dream transcript."""
        user_id = uuid4()
        dream_id = uuid4()
        
        # Create a messy, transcription-like dream
        dream = Dream(
            id=dream_id,
            title=None,
            created_at=datetime.utcnow(),
            state=DreamStatus.TRANSCRIBED.value,
            transcript="So, um, I was like, you know, in this place... it was like my house but not my house? And there were, uh, these people, but I couldn't see their faces clearly. Wait, actually, I think one of them was my mom, but she looked younger? Anyway, so we were, we were doing something... oh right, we were cooking! But the kitchen kept changing, like one minute it was modern and the next it was like my grandmother's old kitchen from when I was a kid. And the recipe, we couldn't find the recipe! That was the main thing, we needed this recipe but it kept disappearing every time we found it."
        )
        dream.user_id = user_id
        
        # Setup mocks
        mock_repos['dream_repo'].get_dream.return_value = dream
        updated_dream = Dream(id=dream_id, title="Placeholder", summary="Placeholder")
        updated_dream.user_id = user_id
        mock_repos['dream_repo'].update_title_and_summary.return_value = updated_dream
        mock_repos['dream_repo'].update_summary_status = AsyncMock()
        
        # Execute with real LLM
        with patch('new_backend_ruminate.infrastructure.db.bootstrap.session_scope') as mock_session_scope:
            mock_session = AsyncMock()
            mock_session_scope.return_value.__aenter__.return_value = mock_session
            
            result = await dream_service_real_llm.generate_title_and_summary(user_id, dream_id)
        
        # Verify success
        assert result is not None
        
        # Extract generated content
        call_args = mock_repos['dream_repo'].update_title_and_summary.call_args[0]
        generated_title = call_args[2]
        generated_summary = call_args[3]
        
        # Verify the LLM cleaned up the rambling
        assert isinstance(generated_title, str)
        assert len(generated_title) > 0
        assert isinstance(generated_summary, str)
        assert len(generated_summary) > 30
        
        # Should contain cooking/kitchen related terms
        cooking_terms = ['cook', 'kitchen', 'recipe', 'food', 'meal']
        family_terms = ['mom', 'mother', 'grandmother', 'family']
        
        content = (generated_title + " " + generated_summary).lower()
        has_cooking_terms = any(term in content for term in cooking_terms)
        has_family_terms = any(term in content for term in family_terms)
        
        # Should capture the main elements without the rambling
        assert has_cooking_terms or has_family_terms, f"Missing key themes. Title: {generated_title}, Summary: {generated_summary}"
        
        # Summary should be cleaner than the original transcript
        rambling_indicators = ['um', 'uh', 'like,', 'you know']
        summary_clean = not any(indicator in generated_summary.lower() for indicator in rambling_indicators)
        
        assert summary_clean, f"Summary still contains rambling: {generated_summary}"
        
        print(f"✅ REAL LLM CLEANUP SUCCESS:")
        print(f"Original (rambling): {dream.transcript[:100]}...")
        print(f"Generated Title: {generated_title}")
        print(f"Generated Summary: {generated_summary}")
    
    @llm_integration_test
    async def test_short_dream_real_llm(self, dream_service_real_llm, mock_repos):
        """Test LLM with a very short dream transcript."""
        user_id = uuid4()
        dream_id = uuid4()
        
        # Very short dream
        dream = Dream(
            id=dream_id,
            title=None,
            created_at=datetime.utcnow(),
            state=DreamStatus.TRANSCRIBED.value,
            transcript="I was falling."
        )
        dream.user_id = user_id
        
        # Setup mocks
        mock_repos['dream_repo'].get_dream.return_value = dream
        updated_dream = Dream(id=dream_id, title="Placeholder", summary="Placeholder")
        updated_dream.user_id = user_id
        mock_repos['dream_repo'].update_title_and_summary.return_value = updated_dream
        mock_repos['dream_repo'].update_summary_status = AsyncMock()
        
        # Execute with real LLM
        with patch('new_backend_ruminate.infrastructure.db.bootstrap.session_scope') as mock_session_scope:
            mock_session = AsyncMock()
            mock_session_scope.return_value.__aenter__.return_value = mock_session
            
            result = await dream_service_real_llm.generate_title_and_summary(user_id, dream_id)
        
        # Verify success
        assert result is not None
        
        # Extract generated content
        call_args = mock_repos['dream_repo'].update_title_and_summary.call_args[0]
        generated_title = call_args[2]
        generated_summary = call_args[3]
        
        # Verify appropriate length for short dream
        assert isinstance(generated_title, str)
        assert len(generated_title) > 0
        assert len(generated_title.split()) <= 5  # Should be very concise for short dream
        assert isinstance(generated_summary, str)
        assert len(generated_summary) > 5  # Should expand slightly but not too much
        
        # Should relate to falling
        content = (generated_title + " " + generated_summary).lower()
        assert 'fall' in content, f"Missing falling theme. Title: {generated_title}, Summary: {generated_summary}"
        
        print(f"✅ REAL LLM SHORT DREAM SUCCESS:")
        print(f"Original: {dream.transcript}")
        print(f"Generated Title: {generated_title}")
        print(f"Generated Summary: {generated_summary}")
    
    @llm_integration_test
    async def test_emotional_dream_real_llm(self, dream_service_real_llm, mock_repos):
        """Test LLM's handling of emotionally rich dream content."""
        user_id = uuid4()
        dream_id = uuid4()
        
        # Emotional dream with feelings
        dream = Dream(
            id=dream_id,
            title=None,
            created_at=datetime.utcnow(),
            state=DreamStatus.TRANSCRIBED.value,
            transcript="I was back in my childhood bedroom, but I felt so sad and lonely. My dad was there, but he looked disappointed in me. I tried to explain something to him, but no words would come out. I felt this crushing weight on my chest, like I was failing him. The room started getting darker and darker. I woke up feeling really anxious and upset."
        )
        dream.user_id = user_id
        
        # Setup mocks
        mock_repos['dream_repo'].get_dream.return_value = dream
        updated_dream = Dream(id=dream_id, title="Placeholder", summary="Placeholder")
        updated_dream.user_id = user_id
        mock_repos['dream_repo'].update_title_and_summary.return_value = updated_dream
        mock_repos['dream_repo'].update_summary_status = AsyncMock()
        
        # Execute with real LLM
        with patch('new_backend_ruminate.infrastructure.db.bootstrap.session_scope') as mock_session_scope:
            mock_session = AsyncMock()
            mock_session_scope.return_value.__aenter__.return_value = mock_session
            
            result = await dream_service_real_llm.generate_title_and_summary(user_id, dream_id)
        
        # Verify success
        assert result is not None
        
        # Extract generated content
        call_args = mock_repos['dream_repo'].update_title_and_summary.call_args[0]
        generated_title = call_args[2]
        generated_summary = call_args[3]
        
        # Should preserve emotional content
        emotional_terms = ['sad', 'lonely', 'disappointed', 'anxious', 'upset', 'weight', 'failing', 'dark']
        family_terms = ['dad', 'father', 'parent', 'childhood', 'bedroom']
        
        content = (generated_title + " " + generated_summary).lower()
        has_emotional_content = any(term in content for term in emotional_terms)
        has_family_content = any(term in content for term in family_terms)
        
        # Should capture both the emotional and family themes
        assert has_emotional_content, f"Missing emotional content. Generated: Title: {generated_title}, Summary: {generated_summary}"
        assert has_family_content, f"Missing family content. Generated: Title: {generated_title}, Summary: {generated_summary}"
        
        print(f"✅ REAL LLM EMOTIONAL DREAM SUCCESS:")
        print(f"Generated Title: {generated_title}")
        print(f"Generated Summary: {generated_summary}")


